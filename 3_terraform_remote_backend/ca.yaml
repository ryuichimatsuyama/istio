chart:
  files:
  - data: IyBQYXR0ZXJucyB0byBpZ25vcmUgd2hlbiBidWlsZGluZyBwYWNrYWdlcy4KIyBUaGlzIHN1cHBvcnRzIHNoZWxsIGdsb2IgbWF0Y2hpbmcsIHJlbGF0aXZlIHBhdGggbWF0Y2hpbmcsIGFuZAojIG5lZ2F0aW9uIChwcmVmaXhlZCB3aXRoICEpLiBPbmx5IG9uZSBwYXR0ZXJuIHBlciBsaW5lLgouRFNfU3RvcmUKIyBDb21tb24gVkNTIGRpcnMKLmdpdC8KLmdpdGlnbm9yZQouYnpyLwouYnpyaWdub3JlCi5oZy8KLmhnaWdub3JlCi5zdm4vCiMgQ29tbW9uIGJhY2t1cCBmaWxlcwoqLnN3cAoqLmJhawoqLnRtcAoqLm9yaWcKKn4KIyBWYXJpb3VzIElERXMKLnByb2plY3QKLmlkZWEvCioudG1wcm9qCi52c2NvZGUvCg==
    name: .helmignore
  - data: 
    name: README.md
  - data: 
    name: README.md.gotmpl
  lock: null
  metadata:
    apiVersion: v2
    appVersion: 1.33.0
    description: Scales Kubernetes worker nodes within autoscaling groups.
    home: https://github.com/kubernetes/autoscaler
    icon: https://github.com/kubernetes/kubernetes/raw/master/logo/logo.png
    maintainers:
    - email: guyjtempleton@googlemail.com
      name: gjtempleton
    name: cluster-autoscaler
    sources:
    - https://github.com/kubernetes/autoscaler/tree/master/cluster-autoscaler
    type: application
    version: 9.50.0
  schema: null
  templates:
  - data: e3stIGlmIG9yICggb3IgLlZhbHVlcy5hdXRvRGlzY292ZXJ5LmNsdXN0ZXJOYW1lIC5WYWx1ZXMuYXV0b0Rpc2NvdmVyeS5uYW1lc3BhY2UgLlZhbHVlcy5hdXRvRGlzY292ZXJ5LmxhYmVscyApIC5WYWx1ZXMuYXV0b3NjYWxpbmdHcm91cHMgfX0KClRvIHZlcmlmeSB0aGF0IGNsdXN0ZXItYXV0b3NjYWxlciBoYXMgc3RhcnRlZCwgcnVuOgoKICBrdWJlY3RsIC0tbmFtZXNwYWNlPXt7IC5SZWxlYXNlLk5hbWVzcGFjZSB9fSBnZXQgcG9kcyAtbCAiYXBwLmt1YmVybmV0ZXMuaW8vbmFtZT17eyB0ZW1wbGF0ZSAiY2x1c3Rlci1hdXRvc2NhbGVyLm5hbWUiIC4gfX0sYXBwLmt1YmVybmV0ZXMuaW8vaW5zdGFuY2U9e3sgLlJlbGVhc2UuTmFtZSB9fSIKCnt7LSBlbHNlIC19fQoKIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCiMjIyMgICBFUlJPUjogWW91IG11c3Qgc3BlY2lmeSB2YWx1ZXMgZm9yIGVpdGhlciAgICAgICAgICAgICAgICAgICAgICAgICAgIyMjIwojIyMjICAgYXV0b0Rpc2NvdmVyeSBvciBhdXRvc2NhbGluZ0dyb3Vwc1tdICAgICAgICAgICAgICAgICAgICMjIyMKIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCgpUaGUgZGVwbG95bWVudCBhbmQgcG9kIHdpbGwgbm90IGJlIGNyZWF0ZWQgYW5kIHRoZSBpbnN0YWxsYXRpb24gaXMgbm90IGZ1bmN0aW9uYWwKU2VlIFJFQURNRToKICBvcGVuIGh0dHBzOi8vZ2l0aHViLmNvbS9rdWJlcm5ldGVzL2F1dG9zY2FsZXIvdHJlZS9tYXN0ZXIvY2hhcnRzL2NsdXN0ZXItYXV0b3NjYWxlcgoKe3stIGVuZCAtfX0K
    name: templates/NOTES.txt
  - data: e3svKiB2aW06IHNldCBmaWxldHlwZT1tdXN0YWNoZTogKi99fQp7ey8qCkV4cGFuZCB0aGUgbmFtZSBvZiB0aGUgY2hhcnQuCiovfX0Ke3stIGRlZmluZSAiY2x1c3Rlci1hdXRvc2NhbGVyLm5hbWUiIC19fQp7ey0gZGVmYXVsdCAocHJpbnRmICIlcy0lcyIgLlZhbHVlcy5jbG91ZFByb3ZpZGVyIC5DaGFydC5OYW1lKSAuVmFsdWVzLm5hbWVPdmVycmlkZSB8IHRydW5jIDYzIHwgdHJpbVN1ZmZpeCAiLSIgLX19Cnt7LSBlbmQgLX19Cgp7ey8qCkNyZWF0ZSBhIGRlZmF1bHQgZnVsbHkgcXVhbGlmaWVkIGFwcCBuYW1lLgpXZSB0cnVuY2F0ZSBhdCA2MyBjaGFycyBiZWNhdXNlIHNvbWUgS3ViZXJuZXRlcyBuYW1lIGZpZWxkcyBhcmUgbGltaXRlZCB0byB0aGlzIChieSB0aGUgRE5TIG5hbWluZyBzcGVjKS4KKi99fQp7ey0gZGVmaW5lICJjbHVzdGVyLWF1dG9zY2FsZXIuZnVsbG5hbWUiIC19fQp7ey0gaWYgLlZhbHVlcy5mdWxsbmFtZU92ZXJyaWRlIC19fQp7ey0gLlZhbHVlcy5mdWxsbmFtZU92ZXJyaWRlIHwgdHJ1bmMgNjMgfCB0cmltU3VmZml4ICItIiAtfX0Ke3stIGVsc2UgLX19Cnt7LSAkbmFtZSA6PSBkZWZhdWx0IChwcmludGYgIiVzLSVzIiAuVmFsdWVzLmNsb3VkUHJvdmlkZXIgLkNoYXJ0Lk5hbWUpIC5WYWx1ZXMubmFtZU92ZXJyaWRlIC19fQp7ey0gaWYgbmUgJG5hbWUgLlJlbGVhc2UuTmFtZSAtfX0Ke3stIHByaW50ZiAiJXMtJXMiIC5SZWxlYXNlLk5hbWUgJG5hbWUgfCB0cnVuYyA2MyB8IHRyaW1TdWZmaXggIi0iIC19fQp7ey0gZWxzZSAtfX0Ke3stIHByaW50ZiAiJXMiICRuYW1lIHwgdHJ1bmMgNjMgfCB0cmltU3VmZml4ICItIiAtfX0Ke3stIGVuZCAtfX0Ke3stIGVuZCAtfX0Ke3stIGVuZCAtfX0KCnt7LyoKQ3JlYXRlIGNoYXJ0IG5hbWUgYW5kIHZlcnNpb24gYXMgdXNlZCBieSB0aGUgY2hhcnQgbGFiZWwuCiovfX0Ke3stIGRlZmluZSAiY2x1c3Rlci1hdXRvc2NhbGVyLmNoYXJ0IiAtfX0Ke3stIHByaW50ZiAiJXMtJXMiIC5DaGFydC5OYW1lIC5DaGFydC5WZXJzaW9uIHwgcmVwbGFjZSAiKyIgIl8iIHwgdHJ1bmMgNjMgfCB0cmltU3VmZml4ICItIiAtfX0Ke3stIGVuZCAtfX0KCnt7LyoKUmV0dXJuIGluc3RhbmNlIGFuZCBuYW1lIGxhYmVscy4KKi99fQp7ey0gZGVmaW5lICJjbHVzdGVyLWF1dG9zY2FsZXIuaW5zdGFuY2UtbmFtZSIgLX19CmFwcC5rdWJlcm5ldGVzLmlvL2luc3RhbmNlOiB7eyAuUmVsZWFzZS5OYW1lIHwgcXVvdGUgfX0KYXBwLmt1YmVybmV0ZXMuaW8vbmFtZToge3sgaW5jbHVkZSAiY2x1c3Rlci1hdXRvc2NhbGVyLm5hbWUiIC4gfCBxdW90ZSB9fQp7ey0gZW5kIC19fQoKCnt7LyoKUmV0dXJuIGxhYmVscywgaW5jbHVkaW5nIGluc3RhbmNlIGFuZCBuYW1lLgoqL319Cnt7LSBkZWZpbmUgImNsdXN0ZXItYXV0b3NjYWxlci5sYWJlbHMiIC19fQp7eyBpbmNsdWRlICJjbHVzdGVyLWF1dG9zY2FsZXIuaW5zdGFuY2UtbmFtZSIgLiB9fQphcHAua3ViZXJuZXRlcy5pby9tYW5hZ2VkLWJ5OiB7eyAuUmVsZWFzZS5TZXJ2aWNlIHwgcXVvdGUgfX0KaGVsbS5zaC9jaGFydDoge3sgaW5jbHVkZSAiY2x1c3Rlci1hdXRvc2NhbGVyLmNoYXJ0IiAuIHwgcXVvdGUgfX0Ke3stIGlmIC5WYWx1ZXMuYWRkaXRpb25hbExhYmVscyB9fQp7eyB0b1lhbWwgLlZhbHVlcy5hZGRpdGlvbmFsTGFiZWxzIH19Cnt7LSBlbmQgLX19Cnt7LSBlbmQgLX19Cgp7ey8qClJldHVybiB0aGUgYXBwcm9wcmlhdGUgYXBpVmVyc2lvbiBmb3IgZGVwbG95bWVudC4KKi99fQp7ey0gZGVmaW5lICJkZXBsb3ltZW50LmFwaVZlcnNpb24iIC19fQp7ey0gJGt1YmVUYXJnZXRWZXJzaW9uIDo9IGRlZmF1bHQgLkNhcGFiaWxpdGllcy5LdWJlVmVyc2lvbi5HaXRWZXJzaW9uIC5WYWx1ZXMua3ViZVRhcmdldFZlcnNpb25PdmVycmlkZSB9fQp7ey0gaWYgc2VtdmVyQ29tcGFyZSAiPDEuOS0wIiAka3ViZVRhcmdldFZlcnNpb24gLX19Cnt7LSBwcmludCAiYXBwcy92MWJldGEyIiAtfX0Ke3stIGVsc2UgLX19Cnt7LSBwcmludCAiYXBwcy92MSIgLX19Cnt7LSBlbmQgLX19Cnt7LSBlbmQgLX19Cgp7ey8qClJldHVybiB0aGUgYXBwcm9wcmlhdGUgYXBpVmVyc2lvbiBmb3IgcG9kc2VjdXJpdHlwb2xpY3kuCiovfX0Ke3stIGRlZmluZSAicG9kc2VjdXJpdHlwb2xpY3kuYXBpVmVyc2lvbiIgLX19Cnt7LSAka3ViZVRhcmdldFZlcnNpb24gOj0gZGVmYXVsdCAuQ2FwYWJpbGl0aWVzLkt1YmVWZXJzaW9uLkdpdFZlcnNpb24gLlZhbHVlcy5rdWJlVGFyZ2V0VmVyc2lvbk92ZXJyaWRlIH19Cnt7LSBpZiBzZW12ZXJDb21wYXJlICI8MS4xMC0wIiAka3ViZVRhcmdldFZlcnNpb24gLX19Cnt7LSBwcmludCAiZXh0ZW5zaW9ucy92MWJldGExIiAtfX0Ke3stIGVsc2UgLX19Cnt7LSBwcmludCAicG9saWN5L3YxYmV0YTEiIC19fQp7ey0gZW5kIC19fQp7ey0gZW5kIC19fQoKe3svKgpSZXR1cm4gdGhlIGFwcHJvcHJpYXRlIGFwaVZlcnNpb24gZm9yIHBvZERpc3J1cHRpb25CdWRnZXQuCiovfX0Ke3stIGRlZmluZSAicG9kRGlzcnVwdGlvbkJ1ZGdldC5hcGlWZXJzaW9uIiAtfX0Ke3stICRrdWJlVGFyZ2V0VmVyc2lvbiA6PSBkZWZhdWx0IC5DYXBhYmlsaXRpZXMuS3ViZVZlcnNpb24uR2l0VmVyc2lvbiAuVmFsdWVzLmt1YmVUYXJnZXRWZXJzaW9uT3ZlcnJpZGUgfX0Ke3stIGlmIHNlbXZlckNvbXBhcmUgIjwxLjIxLTAiICRrdWJlVGFyZ2V0VmVyc2lvbiAtfX0Ke3stIHByaW50ICJwb2xpY3kvdjFiZXRhMSIgLX19Cnt7LSBlbHNlIC19fQp7ey0gcHJpbnQgInBvbGljeS92MSIgLX19Cnt7LSBlbmQgLX19Cnt7LSBlbmQgLX19Cgp7ey8qClJldHVybiB0aGUgc2VydmljZSBhY2NvdW50IG5hbWUgdXNlZCBieSB0aGUgcG9kLgoqL319Cnt7LSBkZWZpbmUgImNsdXN0ZXItYXV0b3NjYWxlci5zZXJ2aWNlQWNjb3VudE5hbWUiIC19fQp7ey0gaWYgLlZhbHVlcy5yYmFjLnNlcnZpY2VBY2NvdW50LmNyZWF0ZSAtfX0KICAgIHt7IGRlZmF1bHQgKGluY2x1ZGUgImNsdXN0ZXItYXV0b3NjYWxlci5mdWxsbmFtZSIgLikgLlZhbHVlcy5yYmFjLnNlcnZpY2VBY2NvdW50Lm5hbWUgfX0Ke3stIGVsc2UgLX19CiAgICB7eyBkZWZhdWx0ICJkZWZhdWx0IiAuVmFsdWVzLnJiYWMuc2VydmljZUFjY291bnQubmFtZSB9fQp7ey0gZW5kIC19fQp7ey0gZW5kIC19fQoKe3svKgpSZXR1cm4gdHJ1ZSBpZiB0aGUgcHJpb3JpdHkgZXhwYW5kZXIgaXMgZW5hYmxlZAoqL319Cnt7LSBkZWZpbmUgImNsdXN0ZXItYXV0b3NjYWxlci5wcmlvcml0eUV4cGFuZGVyRW5hYmxlZCIgLX19Cnt7LSAkZXhwYW5kZXJzIDo9IHNwbGl0TGlzdCAiLCIgKGRlZmF1bHQgIiIgLlZhbHVlcy5leHRyYUFyZ3MuZXhwYW5kZXIpIC19fQp7ey0gaWYgaGFzICJwcmlvcml0eSIgJGV4cGFuZGVycyAtfX0Ke3stIHRydWUgLX19Cnt7LSBlbmQgLX19Cnt7LSBlbmQgLX19Cgp7ey8qCmF1dG9EaXNjb3ZlcnkuY2x1c3Rlck5hbWUgZm9yIGNsdXN0ZXJhcGkuCiovfX0Ke3stIGRlZmluZSAiY2x1c3Rlci1hdXRvc2NhbGVyLmNhcGlBdXRvZGlzY292ZXJ5LmNsdXN0ZXJOYW1lIiAtfX0Ke3stIHByaW50ICJjbHVzdGVyTmFtZT0iIC19fXt7IHRwbCAoLlZhbHVlcy5hdXRvRGlzY292ZXJ5LmNsdXN0ZXJOYW1lKSAuIH19Cnt7LSBlbmQgLX19Cgp7ey8qCmF1dG9EaXNjb3ZlcnkubmFtZXNwYWNlIGZvciBjbHVzdGVyYXBpLgoqL319Cnt7LSBkZWZpbmUgImNsdXN0ZXItYXV0b3NjYWxlci5jYXBpQXV0b2Rpc2NvdmVyeS5uYW1lc3BhY2UiIC19fQp7ey0gcHJpbnQgIm5hbWVzcGFjZT0iIH19e3sgLlZhbHVlcy5hdXRvRGlzY292ZXJ5Lm5hbWVzcGFjZSAtfX0Ke3stIGVuZCAtfX0KCnt7LyoKYXV0b0Rpc2NvdmVyeS5sYWJlbHMgZm9yIGNsdXN0ZXJhcGkuCiovfX0Ke3stIGRlZmluZSAiY2x1c3Rlci1hdXRvc2NhbGVyLmNhcGlBdXRvZGlzY292ZXJ5LmxhYmVscyIgLX19Cnt7LSByYW5nZSAkaSwgJGVsIDo9IC5WYWx1ZXMuYXV0b0Rpc2NvdmVyeS5sYWJlbHMgLX19Cnt7LSBpZiAkaSAtfX17ey0gcHJpbnQgIiwiIC19fXt7LSBlbmQgLX19Cnt7LSByYW5nZSAka2V5LCAkdmFsIDo9ICRlbCAtfX0Ke3stICRrZXkgLX19e3stIHByaW50ICI9IiAtfX17ey0gJHZhbCAtfX0Ke3stIGVuZCAtfX0Ke3stIGVuZCAtfX0Ke3stIGVuZCAtfX0KCnt7LyoKUmV0dXJuIHRoZSBhdXRvZGlzY292ZXJ5cGFyYW1ldGVycyBmb3IgY2x1c3RlcmFwaS4KKi99fQp7ey0gZGVmaW5lICJjbHVzdGVyLWF1dG9zY2FsZXIuY2FwaUF1dG9kaXNjb3ZlcnlDb25maWciIC19fQp7ey0gaWYgLlZhbHVlcy5hdXRvRGlzY292ZXJ5LmNsdXN0ZXJOYW1lIC19fQp7eyBpbmNsdWRlICJjbHVzdGVyLWF1dG9zY2FsZXIuY2FwaUF1dG9kaXNjb3ZlcnkuY2x1c3Rlck5hbWUiIC4gfX0KICAgIHt7LSBpZiAuVmFsdWVzLmF1dG9EaXNjb3ZlcnkubmFtZXNwYWNlIH19CiAgICB7ey0gcHJpbnQgIiwiIC19fQogICAge3sgaW5jbHVkZSAiY2x1c3Rlci1hdXRvc2NhbGVyLmNhcGlBdXRvZGlzY292ZXJ5Lm5hbWVzcGFjZSIgLiB9fQogICAge3stIGVuZCAtfX0KICAgIHt7LSBpZiAuVmFsdWVzLmF1dG9EaXNjb3ZlcnkubGFiZWxzIH19CiAgICB7ey0gcHJpbnQgIiwiIC19fQogICAge3sgaW5jbHVkZSAiY2x1c3Rlci1hdXRvc2NhbGVyLmNhcGlBdXRvZGlzY292ZXJ5LmxhYmVscyIgLiB9fQogICAge3stIGVuZCAtfX0Ke3stIGVsc2UgaWYgLlZhbHVlcy5hdXRvRGlzY292ZXJ5Lm5hbWVzcGFjZSAtfX0Ke3sgaW5jbHVkZSAiY2x1c3Rlci1hdXRvc2NhbGVyLmNhcGlBdXRvZGlzY292ZXJ5Lm5hbWVzcGFjZSIgLiB9fQogICAge3stIGlmIC5WYWx1ZXMuYXV0b0Rpc2NvdmVyeS5sYWJlbHMgfX0KICAgIHt7LSBwcmludCAiLCIgLX19CiAgICB7eyBpbmNsdWRlICJjbHVzdGVyLWF1dG9zY2FsZXIuY2FwaUF1dG9kaXNjb3ZlcnkubGFiZWxzIiAuIH19CiAgICB7ey0gZW5kIC19fQp7ey0gZWxzZSBpZiAuVmFsdWVzLmF1dG9EaXNjb3ZlcnkubGFiZWxzIC19fQogICAge3sgaW5jbHVkZSAiY2x1c3Rlci1hdXRvc2NhbGVyLmNhcGlBdXRvZGlzY292ZXJ5LmxhYmVscyIgLiB9fQp7ey0gZW5kIC19fQp7ey0gZW5kIC19fQo=
    name: templates/_helpers.tpl
  - data: e3stIGlmIGFuZCAuVmFsdWVzLnJiYWMuY3JlYXRlIC5WYWx1ZXMucmJhYy5jbHVzdGVyU2NvcGVkIC19fQphcGlWZXJzaW9uOiByYmFjLmF1dGhvcml6YXRpb24uazhzLmlvL3YxCmtpbmQ6IENsdXN0ZXJSb2xlCm1ldGFkYXRhOgogIGxhYmVsczoKe3sgaW5jbHVkZSAiY2x1c3Rlci1hdXRvc2NhbGVyLmxhYmVscyIgLiB8IGluZGVudCA0IH19CiAgbmFtZToge3sgdGVtcGxhdGUgImNsdXN0ZXItYXV0b3NjYWxlci5mdWxsbmFtZSIgLiB9fQpydWxlczoKe3stIGlmIChlcSAuVmFsdWVzLmNsb3VkUHJvdmlkZXIgImNvcmV3ZWF2ZSIpIH19CiAgLSBhcGlHcm91cHM6CiAgICAtICJjb21wdXRlLmNvcmV3ZWF2ZS5jb20iCiAgICByZXNvdXJjZXM6CiAgICAtIG5vZGVwb29scwogICAgdmVyYnM6CiAgICAtIGdldAogICAgLSBsaXN0CiAgICAtIHBhdGNoCiAgICAtIHVwZGF0ZQp7ey0gZW5kIH19CiAgLSBhcGlHcm91cHM6CiAgICAgIC0gIiIKICAgIHJlc291cmNlczoKICAgICAgLSBldmVudHMKICAgICAgLSBlbmRwb2ludHMKICAgIHZlcmJzOgogICAgICAtIGNyZWF0ZQogICAgICAtIHBhdGNoCiAgLSBhcGlHcm91cHM6CiAgICAtICIiCiAgICByZXNvdXJjZXM6CiAgICAtIHBvZHMvZXZpY3Rpb24KICAgIHZlcmJzOgogICAgLSBjcmVhdGUKICAtIGFwaUdyb3VwczoKICAgICAgLSAiIgogICAgcmVzb3VyY2VzOgogICAgICAtIHBvZHMvc3RhdHVzCiAgICB2ZXJiczoKICAgICAgLSB1cGRhdGUKICAtIGFwaUdyb3VwczoKICAgICAgLSAiIgogICAgcmVzb3VyY2VzOgogICAgICAtIGVuZHBvaW50cwogICAgcmVzb3VyY2VOYW1lczoKICAgICAgLSBjbHVzdGVyLWF1dG9zY2FsZXIKICAgIHZlcmJzOgogICAgICAtIGdldAogICAgICAtIHVwZGF0ZQogIC0gYXBpR3JvdXBzOgogICAgICAtICIiCiAgICByZXNvdXJjZXM6CiAgICAgIC0gbm9kZXMKICAgIHZlcmJzOgogICAgLSB3YXRjaAogICAgLSBsaXN0CiAgICAtIGNyZWF0ZQogICAgLSBkZWxldGUKICAgIC0gZ2V0CiAgICAtIHVwZGF0ZQogIC0gYXBpR3JvdXBzOgogICAgLSAiIgogICAgcmVzb3VyY2VzOgogICAgICAtIG5hbWVzcGFjZXMKICAgICAgLSBwb2RzCiAgICAgIC0gc2VydmljZXMKICAgICAgLSByZXBsaWNhdGlvbmNvbnRyb2xsZXJzCiAgICAgIC0gcGVyc2lzdGVudHZvbHVtZWNsYWltcwogICAgICAtIHBlcnNpc3RlbnR2b2x1bWVzCiAgICB2ZXJiczoKICAgICAgLSB3YXRjaAogICAgICAtIGxpc3QKICAgICAgLSBnZXQKICAtIGFwaUdyb3VwczoKICAgIC0gYmF0Y2gKICAgIHJlc291cmNlczoKICAgICAgLSBqb2JzCiAgICAgIC0gY3JvbmpvYnMKICAgIHZlcmJzOgogICAgICAtIHdhdGNoCiAgICAgIC0gbGlzdAogICAgICAtIGdldAogIC0gYXBpR3JvdXBzOgogICAgLSBiYXRjaAogICAgLSBleHRlbnNpb25zCiAgICByZXNvdXJjZXM6CiAgICAtIGpvYnMKICAgIHZlcmJzOgogICAgLSBnZXQKICAgIC0gbGlzdAogICAgLSBwYXRjaAogICAgLSB3YXRjaAogIC0gYXBpR3JvdXBzOgogICAgICAtIGV4dGVuc2lvbnMKICAgIHJlc291cmNlczoKICAgICAgLSByZXBsaWNhc2V0cwogICAgICAtIGRhZW1vbnNldHMKICAgIHZlcmJzOgogICAgICAtIHdhdGNoCiAgICAgIC0gbGlzdAogICAgICAtIGdldAogIC0gYXBpR3JvdXBzOgogICAgICAtIHBvbGljeQogICAgcmVzb3VyY2VzOgogICAgICAtIHBvZGRpc3J1cHRpb25idWRnZXRzCiAgICB2ZXJiczoKICAgICAgLSB3YXRjaAogICAgICAtIGxpc3QKICAtIGFwaUdyb3VwczoKICAgIC0gYXBwcwogICAgcmVzb3VyY2VzOgogICAgLSBkYWVtb25zZXRzCiAgICAtIHJlcGxpY2FzZXRzCiAgICAtIHN0YXRlZnVsc2V0cwogICAgdmVyYnM6CiAgICAtIHdhdGNoCiAgICAtIGxpc3QKICAgIC0gZ2V0CiAgLSBhcGlHcm91cHM6CiAgICAtIHN0b3JhZ2UuazhzLmlvCiAgICByZXNvdXJjZXM6CiAgICAtIHN0b3JhZ2VjbGFzc2VzCiAgICAtIGNzaW5vZGVzCiAgICAtIGNzaWRyaXZlcnMKICAgIC0gY3Npc3RvcmFnZWNhcGFjaXRpZXMKICAgIC0gdm9sdW1lYXR0YWNobWVudHMKICAgIHZlcmJzOgogICAgLSB3YXRjaAogICAgLSBsaXN0CiAgICAtIGdldAogIC0gYXBpR3JvdXBzOgogICAgICAtICIiCiAgICByZXNvdXJjZXM6CiAgICAgIC0gY29uZmlnbWFwcwogICAgdmVyYnM6CiAgICAgIC0gbGlzdAogICAgICAtIHdhdGNoCiAgICAgIC0gZ2V0CiAgLSBhcGlHcm91cHM6CiAgICAtIGNvb3JkaW5hdGlvbi5rOHMuaW8KICAgIHJlc291cmNlczoKICAgIC0gbGVhc2VzCiAgICB2ZXJiczoKICAgIC0gY3JlYXRlCiAgLSBhcGlHcm91cHM6CiAgICAtIGNvb3JkaW5hdGlvbi5rOHMuaW8KICAgIHJlc291cmNlTmFtZXM6CiAgICAtIGNsdXN0ZXItYXV0b3NjYWxlcgogICAgcmVzb3VyY2VzOgogICAgLSBsZWFzZXMKICAgIHZlcmJzOgogICAgLSBnZXQKICAgIC0gdXBkYXRlCnt7LSBpZiAuVmFsdWVzLnJiYWMucHNwRW5hYmxlZCB9fQogIC0gYXBpR3JvdXBzOgogICAgLSBleHRlbnNpb25zCiAgICAtIHBvbGljeQogICAgcmVzb3VyY2VzOgogICAgLSBwb2RzZWN1cml0eXBvbGljaWVzCiAgICByZXNvdXJjZU5hbWVzOgogICAgLSB7eyB0ZW1wbGF0ZSAiY2x1c3Rlci1hdXRvc2NhbGVyLmZ1bGxuYW1lIiAuIH19CiAgICB2ZXJiczoKICAgIC0gdXNlCnt7LSBlbmQgLX19Cnt7LSBpZiBhbmQgKCBhbmQgKCBlcSAuVmFsdWVzLmNsb3VkUHJvdmlkZXIgImNsdXN0ZXJhcGkiICkgKCAuVmFsdWVzLnJiYWMuY2x1c3RlclNjb3BlZCApICggb3IgKCBlcSAuVmFsdWVzLmNsdXN0ZXJBUElNb2RlICJpbmNsdXN0ZXItaW5jbHVzdGVyIiApICggZXEgLlZhbHVlcy5jbHVzdGVyQVBJTW9kZSAia3ViZWNvbmZpZy1pbmNsdXN0ZXIiICkgKSl9fQogIC0gYXBpR3JvdXBzOgogICAgLSBjbHVzdGVyLngtazhzLmlvCiAgICByZXNvdXJjZXM6CiAgICAtIG1hY2hpbmVkZXBsb3ltZW50cwogICAgLSBtYWNoaW5lcG9vbHMKICAgIC0gbWFjaGluZXMKICAgIC0gbWFjaGluZXNldHMKICAgIHZlcmJzOgogICAgLSBnZXQKICAgIC0gbGlzdAogICAgLSB1cGRhdGUKICAgIC0gd2F0Y2gKICAtIGFwaUdyb3VwczoKICAgIC0gY2x1c3Rlci54LWs4cy5pbwogICAgcmVzb3VyY2VzOgogICAgLSBtYWNoaW5lZGVwbG95bWVudHMvc2NhbGUKICAgIC0gbWFjaGluZXBvb2xzL3NjYWxlCiAgICB2ZXJiczoKICAgIC0gZ2V0CiAgICAtIHBhdGNoCiAgICAtIHVwZGF0ZQp7ey0gZW5kIH19Cnt7LSBpZiAuVmFsdWVzLnJiYWMuYWRkaXRpb25hbFJ1bGVzIH19Cnt7IHRvWWFtbCAuVmFsdWVzLnJiYWMuYWRkaXRpb25hbFJ1bGVzIHwgaW5kZW50IDIgfX0Ke3stIGVuZCB9fQp7ey0gZW5kIC19fQo=
    name: templates/clusterrole.yaml
  - data: e3stIGlmIGFuZCAuVmFsdWVzLnJiYWMuY3JlYXRlIC5WYWx1ZXMucmJhYy5jbHVzdGVyU2NvcGVkIC19fQphcGlWZXJzaW9uOiByYmFjLmF1dGhvcml6YXRpb24uazhzLmlvL3YxCmtpbmQ6IENsdXN0ZXJSb2xlQmluZGluZwptZXRhZGF0YToKICBsYWJlbHM6Cnt7IGluY2x1ZGUgImNsdXN0ZXItYXV0b3NjYWxlci5sYWJlbHMiIC4gfCBpbmRlbnQgNCB9fQogIG5hbWU6IHt7IHRlbXBsYXRlICJjbHVzdGVyLWF1dG9zY2FsZXIuZnVsbG5hbWUiIC4gfX0Kcm9sZVJlZjoKICBhcGlHcm91cDogcmJhYy5hdXRob3JpemF0aW9uLms4cy5pbwogIGtpbmQ6IENsdXN0ZXJSb2xlCiAgbmFtZToge3sgdGVtcGxhdGUgImNsdXN0ZXItYXV0b3NjYWxlci5mdWxsbmFtZSIgLiB9fQpzdWJqZWN0czoKICAtIGtpbmQ6IFNlcnZpY2VBY2NvdW50CiAgICBuYW1lOiB7eyB0ZW1wbGF0ZSAiY2x1c3Rlci1hdXRvc2NhbGVyLnNlcnZpY2VBY2NvdW50TmFtZSIgLiB9fQogICAgbmFtZXNwYWNlOiB7eyAuUmVsZWFzZS5OYW1lc3BhY2UgfX0Ke3stIGVuZCAtfX0K
    name: templates/clusterrolebinding.yaml
  - data: 
    name: templates/configmap.yaml
  - data: 
    name: templates/deployment.yaml
  - data: e3sgcmFuZ2UgLlZhbHVlcy5leHRyYU9iamVjdHMgfX0KLS0tCnt7IHRwbCAodG9ZYW1sIC4pICQgfX0Ke3sgZW5kIH19Cg==
    name: templates/extra-manifests.yaml
  - data: e3stIGlmIC5WYWx1ZXMucG9kRGlzcnVwdGlvbkJ1ZGdldCAtfX0Ke3stIGlmIGFuZCAuVmFsdWVzLnBvZERpc3J1cHRpb25CdWRnZXQubWluQXZhaWxhYmxlIC5WYWx1ZXMucG9kRGlzcnVwdGlvbkJ1ZGdldC5tYXhVbmF2YWlsYWJsZSB9fQogICAge3stIGZhaWwgIk9ubHkgb25lIG9mIHBvZERpc3J1cHRpb25CdWRnZXQubWluQXZhaWxhYmxlIG9yIHBvZERpc3J1cHRpb25CdWRnZXQubWF4VW5hdmFpbGFibGUgc2hvdWxkIGJlIHNldC4iIH19Cnt7LSBlbmQgfX1hcGlWZXJzaW9uOiB7eyB0ZW1wbGF0ZSAicG9kRGlzcnVwdGlvbkJ1ZGdldC5hcGlWZXJzaW9uIiAuIH19CmtpbmQ6IFBvZERpc3J1cHRpb25CdWRnZXQKbWV0YWRhdGE6CiAgbGFiZWxzOgp7eyBpbmNsdWRlICJjbHVzdGVyLWF1dG9zY2FsZXIubGFiZWxzIiAuIHwgaW5kZW50IDQgfX0KICBuYW1lOiB7eyB0ZW1wbGF0ZSAiY2x1c3Rlci1hdXRvc2NhbGVyLmZ1bGxuYW1lIiAuIH19CiAgbmFtZXNwYWNlOiB7eyAuUmVsZWFzZS5OYW1lc3BhY2UgfX0Kc3BlYzoKICBzZWxlY3RvcjoKICAgIG1hdGNoTGFiZWxzOgp7eyBpbmNsdWRlICJjbHVzdGVyLWF1dG9zY2FsZXIuaW5zdGFuY2UtbmFtZSIgLiB8IGluZGVudCA2IH19CiAge3stIGlmIGFuZCAuVmFsdWVzLnBvZERpc3J1cHRpb25CdWRnZXQubWluQXZhaWxhYmxlIChub3QgLlZhbHVlcy5wb2REaXNydXB0aW9uQnVkZ2V0Lm1heFVuYXZhaWxhYmxlKSB9fQogIG1pbkF2YWlsYWJsZToge3sgLlZhbHVlcy5wb2REaXNydXB0aW9uQnVkZ2V0Lm1pbkF2YWlsYWJsZSB9fQogIHt7LSBlbmQgfX0KICB7ey0gaWYgYW5kIC5WYWx1ZXMucG9kRGlzcnVwdGlvbkJ1ZGdldC5tYXhVbmF2YWlsYWJsZSAobm90IC5WYWx1ZXMucG9kRGlzcnVwdGlvbkJ1ZGdldC5taW5BdmFpbGFibGUpIH19CiAgbWF4VW5hdmFpbGFibGU6IHt7IC5WYWx1ZXMucG9kRGlzcnVwdGlvbkJ1ZGdldC5tYXhVbmF2YWlsYWJsZSB9fQogIHt7LSBlbmQgfX0Ke3stIGVuZCAtfX0K
    name: templates/pdb.yaml
  - data: e3stIGlmIC5WYWx1ZXMucmJhYy5wc3BFbmFibGVkIH19CmFwaVZlcnNpb246IHt7IHRlbXBsYXRlICJwb2RzZWN1cml0eXBvbGljeS5hcGlWZXJzaW9uIiAuIH19CmtpbmQ6IFBvZFNlY3VyaXR5UG9saWN5Cm1ldGFkYXRhOgogIG5hbWU6IHt7IHRlbXBsYXRlICJjbHVzdGVyLWF1dG9zY2FsZXIuZnVsbG5hbWUiIC4gfX0KICBsYWJlbHM6Cnt7IGluY2x1ZGUgImNsdXN0ZXItYXV0b3NjYWxlci5sYWJlbHMiIC4gfCBpbmRlbnQgNCB9fQpzcGVjOgogICMgUHJldmVudHMgcnVubmluZyBpbiBwcml2aWxlZ2VkIG1vZGUKICBwcml2aWxlZ2VkOiBmYWxzZQogICMgUmVxdWlyZWQgdG8gcHJldmVudCBlc2NhbGF0aW9ucyB0byByb290LgogIGFsbG93UHJpdmlsZWdlRXNjYWxhdGlvbjogZmFsc2UKICByZXF1aXJlZERyb3BDYXBhYmlsaXRpZXM6CiAgICAtIEFMTAogIHZvbHVtZXM6CiAgICAtICdjb25maWdNYXAnCiAgICAtICdzZWNyZXQnCiAgICAtICdob3N0UGF0aCcKICAgIC0gJ2VtcHR5RGlyJwogICAgLSAncHJvamVjdGVkJwogICAgLSAnZG93bndhcmRBUEknCiAgaG9zdE5ldHdvcms6IHt7IC5WYWx1ZXMuaG9zdE5ldHdvcmsgfX0KICBob3N0SVBDOiBmYWxzZQogIGhvc3RQSUQ6IGZhbHNlCiAgcnVuQXNVc2VyOgogICAgcnVsZTogUnVuQXNBbnkKICBzZUxpbnV4OgogICAgcnVsZTogUnVuQXNBbnkKICBzdXBwbGVtZW50YWxHcm91cHM6CiAgICBydWxlOiAnTXVzdFJ1bkFzJwogICAgcmFuZ2VzOgogICAgICAjIEZvcmJpZCBhZGRpbmcgdGhlIHJvb3QgZ3JvdXAuCiAgICAgIC0gbWluOiAxCiAgICAgICAgbWF4OiA2NTUzNQogIGZzR3JvdXA6CiAgICBydWxlOiAnTXVzdFJ1bkFzJwogICAgcmFuZ2VzOgogICAgICAjIEZvcmJpZCBhZGRpbmcgdGhlIHJvb3QgZ3JvdXAuCiAgICAgIC0gbWluOiAxCiAgICAgICAgbWF4OiA2NTUzNQogIHJlYWRPbmx5Um9vdEZpbGVzeXN0ZW06IGZhbHNlCnt7LSBlbmQgfX0K
    name: templates/podsecuritypolicy.yaml
  - data: e3stIGlmIGhhc0tleSAuVmFsdWVzLmV4dHJhQXJncyAiZXhwYW5kZXIiIH19Cnt7LSBpZiBhbmQgKC5WYWx1ZXMuZXhwYW5kZXJQcmlvcml0aWVzKSAoaW5jbHVkZSAiY2x1c3Rlci1hdXRvc2NhbGVyLnByaW9yaXR5RXhwYW5kZXJFbmFibGVkIiAuKSAtfX0KYXBpVmVyc2lvbjogdjEKa2luZDogQ29uZmlnTWFwCm1ldGFkYXRhOgogIG5hbWU6IGNsdXN0ZXItYXV0b3NjYWxlci1wcmlvcml0eS1leHBhbmRlcgogIG5hbWVzcGFjZToge3sgLlJlbGVhc2UuTmFtZXNwYWNlIH19CiAgbGFiZWxzOgp7eyBpbmNsdWRlICJjbHVzdGVyLWF1dG9zY2FsZXIubGFiZWxzIiAuIHwgaW5kZW50IDQgfX0KICB7ey0gaWYgLlZhbHVlcy5wcmlvcml0eUNvbmZpZ01hcEFubm90YXRpb25zIH19CiAgYW5ub3RhdGlvbnM6Cnt7IHRvWWFtbCAuVmFsdWVzLnByaW9yaXR5Q29uZmlnTWFwQW5ub3RhdGlvbnMgfCBpbmRlbnQgNCB9fQogIHt7LSBlbmQgfX0KZGF0YToKICBwcmlvcml0aWVzOiB8LQp7ey0gaWYga2luZElzICJzdHJpbmciIC5WYWx1ZXMuZXhwYW5kZXJQcmlvcml0aWVzIH19Cnt7IC5WYWx1ZXMuZXhwYW5kZXJQcmlvcml0aWVzIHwgaW5kZW50IDQgfX0Ke3stIGVsc2UgfX0Ke3stIHJhbmdlICRrLCR2IDo9IC5WYWx1ZXMuZXhwYW5kZXJQcmlvcml0aWVzIH19CiAgICB7eyAkayB8IGludCB9fToKICAgICAge3stIHRvWWFtbCAkdiB8IG5pbmRlbnQgNiB9fQp7ey0gZW5kIC19fQp7ey0gZW5kIC19fQp7ey0gZW5kIC19fQp7ey0gZW5kIC19fQo=
    name: templates/priority-expander-configmap.yaml
  - data: e3stIGlmIC5WYWx1ZXMucHJvbWV0aGV1c1J1bGUuZW5hYmxlZCB9fQphcGlWZXJzaW9uOiBtb25pdG9yaW5nLmNvcmVvcy5jb20vdjEKa2luZDogUHJvbWV0aGV1c1J1bGUKbWV0YWRhdGE6CiAgbmFtZToge3sgaW5jbHVkZSAiY2x1c3Rlci1hdXRvc2NhbGVyLmZ1bGxuYW1lIiAuIH19CiAge3stIGlmIC5WYWx1ZXMucHJvbWV0aGV1c1J1bGUubmFtZXNwYWNlIH19CiAgbmFtZXNwYWNlOiB7eyAuVmFsdWVzLnByb21ldGhldXNSdWxlLm5hbWVzcGFjZSB9fQogIHt7LSBlbmQgfX0KICBsYWJlbHM6IHt7LSB0b1lhbWwgLlZhbHVlcy5wcm9tZXRoZXVzUnVsZS5hZGRpdGlvbmFsTGFiZWxzIHwgbmluZGVudCA0IH19CnNwZWM6CiAgZ3JvdXBzOgogICAgLSBuYW1lOiB7eyBpbmNsdWRlICJjbHVzdGVyLWF1dG9zY2FsZXIuZnVsbG5hbWUiIC4gfX0KICAgICAgaW50ZXJ2YWw6IHt7IC5WYWx1ZXMucHJvbWV0aGV1c1J1bGUuaW50ZXJ2YWwgfX0KICAgICAgcnVsZXM6IHt7LSB0cGwgKHRvWWFtbCAuVmFsdWVzLnByb21ldGhldXNSdWxlLnJ1bGVzKSAuIHwgbmluZGVudCA4IH19Cnt7LSBlbmQgfX0K
    name: templates/prometheusrule.yaml
  - data: e3stIGlmIC5WYWx1ZXMucmJhYy5jcmVhdGUgLX19CmFwaVZlcnNpb246IHJiYWMuYXV0aG9yaXphdGlvbi5rOHMuaW8vdjEKa2luZDogUm9sZQptZXRhZGF0YToKICBsYWJlbHM6Cnt7IGluY2x1ZGUgImNsdXN0ZXItYXV0b3NjYWxlci5sYWJlbHMiIC4gfCBpbmRlbnQgNCB9fQogIG5hbWU6IHt7IHRlbXBsYXRlICJjbHVzdGVyLWF1dG9zY2FsZXIuZnVsbG5hbWUiIC4gfX0KICBuYW1lc3BhY2U6IHt7IC5SZWxlYXNlLk5hbWVzcGFjZSB9fQpydWxlczoKICAtIGFwaUdyb3VwczoKICAgICAgLSAiIgogICAgcmVzb3VyY2VzOgogICAgICAtIGNvbmZpZ21hcHMKICAgIHZlcmJzOgogICAgICAtIGNyZWF0ZQp7ey0gaWYgKGluY2x1ZGUgImNsdXN0ZXItYXV0b3NjYWxlci5wcmlvcml0eUV4cGFuZGVyRW5hYmxlZCIgLikgfX0KICAgICAgLSBsaXN0CiAgICAgIC0gd2F0Y2gKe3stIGVuZCB9fQogIC0gYXBpR3JvdXBzOgogICAgICAtICIiCiAgICByZXNvdXJjZXM6CiAgICAgIC0gY29uZmlnbWFwcwogICAgcmVzb3VyY2VOYW1lczoKICAgICAgLSBjbHVzdGVyLWF1dG9zY2FsZXItc3RhdHVzCnt7LSBpZiAoaW5jbHVkZSAiY2x1c3Rlci1hdXRvc2NhbGVyLnByaW9yaXR5RXhwYW5kZXJFbmFibGVkIiAuKSB9fQogICAgICAtIGNsdXN0ZXItYXV0b3NjYWxlci1wcmlvcml0eS1leHBhbmRlcgp7ey0gZW5kIH19CiAgICB2ZXJiczoKICAgICAgLSBkZWxldGUKICAgICAgLSBnZXQKICAgICAgLSB1cGRhdGUKe3stIGlmIChpbmNsdWRlICJjbHVzdGVyLWF1dG9zY2FsZXIucHJpb3JpdHlFeHBhbmRlckVuYWJsZWQiIC4pIH19CiAgICAgIC0gd2F0Y2gKe3stIGVuZCB9fQp7ey0gaWYgIGVxIChkZWZhdWx0ICIiIChpbmRleCAuVmFsdWVzLmV4dHJhQXJncyAibGVhZGVyLWVsZWN0LXJlc291cmNlLWxvY2siKSkgImNvbmZpZ21hcHMiIH19CiAgLSBhcGlHcm91cHM6CiAgICAgIC0gIiIKICAgIHJlc291cmNlczoKICAgICAgLSBjb25maWdtYXBzCiAgICByZXNvdXJjZU5hbWVzOgogICAgICAtIGNsdXN0ZXItYXV0b3NjYWxlcgogICAgdmVyYnM6CiAgICAgIC0gZ2V0CiAgICAgIC0gdXBkYXRlCnt7LSBlbmQgfX0Ke3stIGlmIGFuZCAoIGFuZCAoIGVxIC5WYWx1ZXMuY2xvdWRQcm92aWRlciAiY2x1c3RlcmFwaSIgKSAoIG5vdCAuVmFsdWVzLnJiYWMuY2x1c3RlclNjb3BlZCApICggb3IgKCBlcSAuVmFsdWVzLmNsdXN0ZXJBUElNb2RlICJpbmNsdXN0ZXItaW5jbHVzdGVyIiApICggZXEgLlZhbHVlcy5jbHVzdGVyQVBJTW9kZSAia3ViZWNvbmZpZy1pbmNsdXN0ZXIiICkgKSl9fQogIC0gYXBpR3JvdXBzOgogICAgLSBjbHVzdGVyLngtazhzLmlvCiAgICByZXNvdXJjZXM6CiAgICAtIG1hY2hpbmVkZXBsb3ltZW50cwogICAgLSBtYWNoaW5lcG9vbHMKICAgIC0gbWFjaGluZXMKICAgIC0gbWFjaGluZXNldHMKICAgIHZlcmJzOgogICAgLSBnZXQKICAgIC0gbGlzdAogICAgLSB1cGRhdGUKICAgIC0gd2F0Y2gKICAtIGFwaUdyb3VwczoKICAgIC0gY2x1c3Rlci54LWs4cy5pbwogICAgcmVzb3VyY2VzOgogICAgLSBtYWNoaW5lZGVwbG95bWVudHMvc2NhbGUKICAgIC0gbWFjaGluZXBvb2xzL3NjYWxlCiAgICB2ZXJiczoKICAgIC0gZ2V0CiAgICAtIHBhdGNoCiAgICAtIHVwZGF0ZQp7ey0gZW5kIH19Cnt7LSBpZiAoIG5vdCAuVmFsdWVzLnJiYWMuY2x1c3RlclNjb3BlZCApIH19CiAgLSBhcGlHcm91cHM6CiAgICAtIGNvb3JkaW5hdGlvbi5rOHMuaW8KICAgIHJlc291cmNlczoKICAgIC0gbGVhc2VzCiAgICB2ZXJiczoKICAgIC0gY3JlYXRlCiAgLSBhcGlHcm91cHM6CiAgICAtIGNvb3JkaW5hdGlvbi5rOHMuaW8KICAgIHJlc291cmNlTmFtZXM6CiAgICAtIGNsdXN0ZXItYXV0b3NjYWxlcgogICAgcmVzb3VyY2VzOgogICAgLSBsZWFzZXMKICAgIHZlcmJzOgogICAgLSBnZXQKICAgIC0gdXBkYXRlCnt7LSBpZiAuVmFsdWVzLnJiYWMuYWRkaXRpb25hbFJ1bGVzIH19Cnt7IHRvWWFtbCAuVmFsdWVzLnJiYWMuYWRkaXRpb25hbFJ1bGVzIHwgaW5kZW50IDJ9fQp7ey0gZW5kIH19Cnt7LSBlbmQgfX0Ke3stIGVuZCAtfX0K
    name: templates/role.yaml
  - data: e3stIGlmIC5WYWx1ZXMucmJhYy5jcmVhdGUgLX19CmFwaVZlcnNpb246IHJiYWMuYXV0aG9yaXphdGlvbi5rOHMuaW8vdjEKa2luZDogUm9sZUJpbmRpbmcKbWV0YWRhdGE6CiAgbGFiZWxzOgp7eyBpbmNsdWRlICJjbHVzdGVyLWF1dG9zY2FsZXIubGFiZWxzIiAuIHwgaW5kZW50IDQgfX0KICBuYW1lOiB7eyB0ZW1wbGF0ZSAiY2x1c3Rlci1hdXRvc2NhbGVyLmZ1bGxuYW1lIiAuIH19CiAgbmFtZXNwYWNlOiB7eyAuUmVsZWFzZS5OYW1lc3BhY2UgfX0Kcm9sZVJlZjoKICBhcGlHcm91cDogcmJhYy5hdXRob3JpemF0aW9uLms4cy5pbwogIGtpbmQ6IFJvbGUKICBuYW1lOiB7eyB0ZW1wbGF0ZSAiY2x1c3Rlci1hdXRvc2NhbGVyLmZ1bGxuYW1lIiAuIH19CnN1YmplY3RzOgogIC0ga2luZDogU2VydmljZUFjY291bnQKICAgIG5hbWU6IHt7IHRlbXBsYXRlICJjbHVzdGVyLWF1dG9zY2FsZXIuc2VydmljZUFjY291bnROYW1lIiAuIH19CiAgICBuYW1lc3BhY2U6IHt7IC5SZWxlYXNlLk5hbWVzcGFjZSB9fQp7ey0gZW5kIC19fQo=
    name: templates/rolebinding.yaml
  - data: e3stIGlmIG5vdCAuVmFsdWVzLnNlY3JldEtleVJlZk5hbWVPdmVycmlkZSB9fQp7ey0gJGlzQXp1cmUgOj0gZXEgLlZhbHVlcy5jbG91ZFByb3ZpZGVyICJhenVyZSIgfX0Ke3stICRpc0F3cyA6PSBlcSAuVmFsdWVzLmNsb3VkUHJvdmlkZXIgImF3cyIgfX0Ke3stICRhd3NDcmVkZW50aWFsc1Byb3ZpZGVkIDo9IGFuZCAuVmFsdWVzLmF3c0FjY2Vzc0tleUlEIC5WYWx1ZXMuYXdzU2VjcmV0QWNjZXNzS2V5IH19Cnt7LSAkaXNDaXZvIDo9IGVxIC5WYWx1ZXMuY2xvdWRQcm92aWRlciAiY2l2byIgfX0KCnt7LSBpZiBvciAkaXNBenVyZSAoYW5kICRpc0F3cyAkYXdzQ3JlZGVudGlhbHNQcm92aWRlZCkgJGlzQ2l2byB9fQphcGlWZXJzaW9uOiB2MQpraW5kOiBTZWNyZXQKbWV0YWRhdGE6CiAgbmFtZToge3sgdGVtcGxhdGUgImNsdXN0ZXItYXV0b3NjYWxlci5mdWxsbmFtZSIgLiB9fQogIG5hbWVzcGFjZToge3sgLlJlbGVhc2UuTmFtZXNwYWNlIH19CmRhdGE6Cnt7LSBpZiAkaXNBenVyZSB9fQogIENsaWVudElEOiAie3sgLlZhbHVlcy5henVyZUNsaWVudElEIHwgYjY0ZW5jIH19IgogIENsaWVudFNlY3JldDogInt7IC5WYWx1ZXMuYXp1cmVDbGllbnRTZWNyZXQgfCBiNjRlbmMgfX0iCiAgUmVzb3VyY2VHcm91cDogInt7IC5WYWx1ZXMuYXp1cmVSZXNvdXJjZUdyb3VwIHwgYjY0ZW5jIH19IgogIFN1YnNjcmlwdGlvbklEOiAie3sgLlZhbHVlcy5henVyZVN1YnNjcmlwdGlvbklEIHwgYjY0ZW5jIH19IgogIFRlbmFudElEOiAie3sgLlZhbHVlcy5henVyZVRlbmFudElEIHwgYjY0ZW5jIH19IgogIFZNVHlwZTogInt7IC5WYWx1ZXMuYXp1cmVWTVR5cGUgfCBiNjRlbmMgfX0iCiAgVXNlckFzc2lnbmVkSWRlbnRpdHlJRDogInt7IC5WYWx1ZXMuYXp1cmVVc2VyQXNzaWduZWRJZGVudGl0eUlEIHwgYjY0ZW5jIH19Igp7ey0gZWxzZSBpZiAkaXNBd3MgfX0KICBBd3NBY2Nlc3NLZXlJZDogInt7IC5WYWx1ZXMuYXdzQWNjZXNzS2V5SUQgfCBiNjRlbmMgfX0iCiAgQXdzU2VjcmV0QWNjZXNzS2V5OiAie3sgLlZhbHVlcy5hd3NTZWNyZXRBY2Nlc3NLZXkgfCBiNjRlbmMgfX0iCnt7LSBlbHNlIGlmICRpc0Npdm8gfX0KICBhcGktdXJsOiAie3sgLlZhbHVlcy5jaXZvQXBpVXJsIHwgYjY0ZW5jIH19IgogIGFwaS1rZXk6ICJ7eyAuVmFsdWVzLmNpdm9BcGlLZXkgfCBiNjRlbmMgfX0iCiAgY2x1c3Rlci1pZDogInt7IC5WYWx1ZXMuY2l2b0NsdXN0ZXJJRCB8IGI2NGVuYyB9fSIKICByZWdpb246ICJ7eyAuVmFsdWVzLmNpdm9SZWdpb24gfCBiNjRlbmMgfX0iCnt7LSBlbmQgfX0Ke3stIGVuZCB9fQp7ey0gZW5kIH19Cg==
    name: templates/secret.yaml
  - data: e3stIGlmIC5WYWx1ZXMuc2VydmljZS5jcmVhdGUgfX0KYXBpVmVyc2lvbjogdjEKa2luZDogU2VydmljZQptZXRhZGF0YToKe3stIGlmIC5WYWx1ZXMuc2VydmljZS5hbm5vdGF0aW9ucyB9fQogIGFubm90YXRpb25zOgp7eyB0b1lhbWwgLlZhbHVlcy5zZXJ2aWNlLmFubm90YXRpb25zIHwgaW5kZW50IDQgfX0Ke3stIGVuZCB9fQogIGxhYmVsczoKe3sgaW5jbHVkZSAiY2x1c3Rlci1hdXRvc2NhbGVyLmxhYmVscyIgLiB8IGluZGVudCA0IH19Cnt7LSBpZiAuVmFsdWVzLnNlcnZpY2UubGFiZWxzIH19Cnt7IHRvWWFtbCAuVmFsdWVzLnNlcnZpY2UubGFiZWxzIHwgaW5kZW50IDQgfX0Ke3stIGVuZCB9fQogIG5hbWU6IHt7IHRlbXBsYXRlICJjbHVzdGVyLWF1dG9zY2FsZXIuZnVsbG5hbWUiIC4gfX0KICBuYW1lc3BhY2U6IHt7IC5SZWxlYXNlLk5hbWVzcGFjZSB9fQpzcGVjOgp7ey0gaWYgLlZhbHVlcy5zZXJ2aWNlLmNsdXN0ZXJJUCB9fQogIGNsdXN0ZXJJUDogInt7IC5WYWx1ZXMuc2VydmljZS5jbHVzdGVySVAgfX0iCnt7LSBlbmQgfX0Ke3stIGlmIC5WYWx1ZXMuc2VydmljZS5leHRlcm5hbElQcyB9fQogIGV4dGVybmFsSVBzOgp7eyB0b1lhbWwgLlZhbHVlcy5zZXJ2aWNlLmV4dGVybmFsSVBzIHwgaW5kZW50IDQgfX0Ke3stIGVuZCB9fQp7ey0gaWYgLlZhbHVlcy5zZXJ2aWNlLmxvYWRCYWxhbmNlcklQIH19CiAgbG9hZEJhbGFuY2VySVA6ICJ7eyAuVmFsdWVzLnNlcnZpY2UubG9hZEJhbGFuY2VySVAgfX0iCnt7LSBlbmQgfX0Ke3stIGlmIC5WYWx1ZXMuc2VydmljZS5sb2FkQmFsYW5jZXJTb3VyY2VSYW5nZXMgfX0KICBsb2FkQmFsYW5jZXJTb3VyY2VSYW5nZXM6Cnt7IHRvWWFtbCAuVmFsdWVzLnNlcnZpY2UubG9hZEJhbGFuY2VyU291cmNlUmFuZ2VzIHwgaW5kZW50IDQgfX0Ke3stIGVuZCB9fQogIHBvcnRzOgogICAgLSBwb3J0OiB7eyAuVmFsdWVzLnNlcnZpY2Uuc2VydmljZVBvcnQgfX0KICAgICAgcHJvdG9jb2w6IFRDUAogICAgICB0YXJnZXRQb3J0OiA4MDg1CiAgICAgIG5hbWU6IHt7IC5WYWx1ZXMuc2VydmljZS5wb3J0TmFtZSB9fQogIHNlbGVjdG9yOgp7eyBpbmNsdWRlICJjbHVzdGVyLWF1dG9zY2FsZXIuaW5zdGFuY2UtbmFtZSIgLiB8IGluZGVudCA0IH19CiAgdHlwZTogInt7IC5WYWx1ZXMuc2VydmljZS50eXBlIH19Igp7ey0gZW5kIH19Cg==
    name: templates/service.yaml
  - data: e3stIGlmIGFuZCAuVmFsdWVzLnJiYWMuY3JlYXRlIC5WYWx1ZXMucmJhYy5zZXJ2aWNlQWNjb3VudC5jcmVhdGUgfX0KYXBpVmVyc2lvbjogdjEKa2luZDogU2VydmljZUFjY291bnQKbWV0YWRhdGE6CiAgbGFiZWxzOgp7eyBpbmNsdWRlICJjbHVzdGVyLWF1dG9zY2FsZXIubGFiZWxzIiAuIHwgaW5kZW50IDQgfX0KICBuYW1lOiB7eyB0ZW1wbGF0ZSAiY2x1c3Rlci1hdXRvc2NhbGVyLnNlcnZpY2VBY2NvdW50TmFtZSIgLiB9fQogIG5hbWVzcGFjZToge3sgLlJlbGVhc2UuTmFtZXNwYWNlIH19Cgp7ey0gd2l0aCAuVmFsdWVzLnJiYWMuc2VydmljZUFjY291bnQuYW5ub3RhdGlvbnMgfX0KICBhbm5vdGF0aW9uczoKICB7ey0gcmFuZ2UgJGssICR2IDo9IC4gfX0KICAgIHt7LSBwcmludGYgIiVzOiAlcyIgKHRwbCAkayAkKSAodHBsICR2ICQpIHwgbmluZGVudCA0IH19CiAge3stIGVuZCB9fQp7ey0gZW5kIH19CmF1dG9tb3VudFNlcnZpY2VBY2NvdW50VG9rZW46IHt7IC5WYWx1ZXMucmJhYy5zZXJ2aWNlQWNjb3VudC5hdXRvbW91bnRTZXJ2aWNlQWNjb3VudFRva2VuIH19Cnt7LSBlbmQgfX0K
    name: templates/serviceaccount.yaml
  - data: e3sgaWYgLlZhbHVlcy5zZXJ2aWNlTW9uaXRvci5lbmFibGVkIH19CmFwaVZlcnNpb246IG1vbml0b3JpbmcuY29yZW9zLmNvbS92MQpraW5kOiBTZXJ2aWNlTW9uaXRvcgptZXRhZGF0YToKICBuYW1lOiB7eyBpbmNsdWRlICJjbHVzdGVyLWF1dG9zY2FsZXIuZnVsbG5hbWUiIC4gfX0KICB7ey0gaWYgLlZhbHVlcy5zZXJ2aWNlTW9uaXRvci5uYW1lc3BhY2UgfX0KICBuYW1lc3BhY2U6IHt7IC5WYWx1ZXMuc2VydmljZU1vbml0b3IubmFtZXNwYWNlIH19CiAge3stIGVuZCB9fQogIHt7LSBpZiAuVmFsdWVzLnNlcnZpY2VNb25pdG9yLmFubm90YXRpb25zIH19CiAgYW5ub3RhdGlvbnM6Cnt7IHRvWWFtbCAuVmFsdWVzLnNlcnZpY2VNb25pdG9yLmFubm90YXRpb25zIHwgaW5kZW50IDQgfX0KICB7ey0gZW5kIH19CiAgbGFiZWxzOgogIHt7LSByYW5nZSAka2V5LCAkdmFsdWUgOj0gLlZhbHVlcy5zZXJ2aWNlTW9uaXRvci5zZWxlY3RvciB9fQogICAge3sgJGtleSB9fToge3sgJHZhbHVlIHwgcXVvdGUgfX0KICB7ey0gZW5kIH19CnNwZWM6CiAgc2VsZWN0b3I6CiAgICBtYXRjaExhYmVsczoKe3sgaW5jbHVkZSAiY2x1c3Rlci1hdXRvc2NhbGVyLmluc3RhbmNlLW5hbWUiIC4gfCBpbmRlbnQgNiB9fQogIGVuZHBvaW50czoKICAtIHBvcnQ6IHt7IC5WYWx1ZXMuc2VydmljZS5wb3J0TmFtZSB9fQogICAgaW50ZXJ2YWw6IHt7IC5WYWx1ZXMuc2VydmljZU1vbml0b3IuaW50ZXJ2YWwgfX0KICAgIHBhdGg6IHt7IC5WYWx1ZXMuc2VydmljZU1vbml0b3IucGF0aCB9fQogICAge3stIGlmIC5WYWx1ZXMuc2VydmljZU1vbml0b3IucmVsYWJlbGluZ3MgfX0KICAgIHJlbGFiZWxpbmdzOgp7eyB0cGwgKHRvWWFtbCAuVmFsdWVzLnNlcnZpY2VNb25pdG9yLnJlbGFiZWxpbmdzIHwgaW5kZW50IDYpIC4gfX0KICAgIHt7LSBlbmQgfX0KICAgIHt7LSBpZiAuVmFsdWVzLnNlcnZpY2VNb25pdG9yLm1ldHJpY1JlbGFiZWxpbmdzIH19CiAgICBtZXRyaWNSZWxhYmVsaW5nczoKe3sgdHBsICh0b1lhbWwgLlZhbHVlcy5zZXJ2aWNlTW9uaXRvci5tZXRyaWNSZWxhYmVsaW5ncyB8IGluZGVudCA2KSAuIH19CiAgICB7ey0gZW5kIH19CiAgbmFtZXNwYWNlU2VsZWN0b3I6CiAgICBtYXRjaE5hbWVzOgogICAgICAtIHt7LlJlbGVhc2UuTmFtZXNwYWNlfX0Ke3sgZW5kIH19Cg==
    name: templates/servicemonitor.yaml
  - data: e3stIGlmIC5WYWx1ZXMudnBhLmVuYWJsZWQgLX19CmFwaVZlcnNpb246IGF1dG9zY2FsaW5nLms4cy5pby92MQpraW5kOiBWZXJ0aWNhbFBvZEF1dG9zY2FsZXIKbWV0YWRhdGE6CiAgbGFiZWxzOgp7eyBpbmNsdWRlICJjbHVzdGVyLWF1dG9zY2FsZXIubGFiZWxzIiAuIHwgaW5kZW50IDQgfX0KICBuYW1lOiB7eyB0ZW1wbGF0ZSAiY2x1c3Rlci1hdXRvc2NhbGVyLmZ1bGxuYW1lIiAuIH19CiAgbmFtZXNwYWNlOiB7eyAuUmVsZWFzZS5OYW1lc3BhY2UgfX0Kc3BlYzoKICB0YXJnZXRSZWY6CiAgICBhcGlWZXJzaW9uOiB7eyB0ZW1wbGF0ZSAiZGVwbG95bWVudC5hcGlWZXJzaW9uIiAuIH19CiAgICBraW5kOiBEZXBsb3ltZW50CiAgICBuYW1lOiB7eyB0ZW1wbGF0ZSAiY2x1c3Rlci1hdXRvc2NhbGVyLmZ1bGxuYW1lIiAuIH19CiAgdXBkYXRlUG9saWN5OgogICAgdXBkYXRlTW9kZToge3sgLlZhbHVlcy52cGEudXBkYXRlTW9kZSB8IHF1b3RlIH19CiAgcmVzb3VyY2VQb2xpY3k6CiAgICBjb250YWluZXJQb2xpY2llczoKICAgIC0gY29udGFpbmVyTmFtZToge3sgdGVtcGxhdGUgImNsdXN0ZXItYXV0b3NjYWxlci5uYW1lIiAuIH19CiAgICAgIHt7LSAuVmFsdWVzLnZwYS5jb250YWluZXJQb2xpY3kgfCB0b1lhbWwgfCBuaW5kZW50IDYgfX0Ke3stIGVuZCAtfX0K
    name: templates/vpa.yaml
  values:
    additionalLabels: {}
    affinity: {}
    autoDiscovery:
      clusterName: null
      labels: []
      namespace: null
      roles:
      - worker
      tags:
      - k8s.io/cluster-autoscaler/enabled
      - k8s.io/cluster-autoscaler/{{ .Values.autoDiscovery.clusterName }}
    autoscalingGroups: []
    autoscalingGroupsnamePrefix: []
    awsAccessKeyID: ""
    awsRegion: ""
    awsSecretAccessKey: ""
    azureClientID: ""
    azureClientSecret: ""
    azureEnableForceDelete: false
    azureResourceGroup: ""
    azureSubscriptionID: ""
    azureTenantID: ""
    azureUseManagedIdentityExtension: false
    azureUseWorkloadIdentityExtension: false
    azureUserAssignedIdentityID: ""
    azureVMType: vmss
    civoApiKey: ""
    civoApiUrl: https://api.civo.com
    civoClusterID: ""
    civoRegion: ""
    cloudConfigPath: ""
    cloudProvider: aws
    clusterAPICloudConfigPath: /etc/kubernetes/mgmt-kubeconfig
    clusterAPIConfigMapsNamespace: ""
    clusterAPIKubeconfigSecret: ""
    clusterAPIMode: incluster-incluster
    clusterAPIWorkloadKubeconfigPath: /etc/kubernetes/value
    containerSecurityContext: {}
    customArgs: []
    deployment:
      annotations: {}
    dnsConfig: {}
    dnsPolicy: ClusterFirst
    envFromConfigMap: ""
    envFromSecret: ""
    expanderPriorities: {}
    extraArgs:
      logtostderr: true
      stderrthreshold: info
      v: 4
    extraEnv: {}
    extraEnvConfigMaps: {}
    extraEnvSecrets: {}
    extraObjects: []
    extraVolumeMounts: []
    extraVolumeSecrets: {}
    extraVolumes: []
    fullnameOverride: ""
    hostNetwork: false
    image:
      pullPolicy: IfNotPresent
      pullSecrets: []
      repository: registry.k8s.io/autoscaling/cluster-autoscaler
      tag: v1.33.0
    initContainers: []
    kubeTargetVersionOverride: ""
    kwokConfigMapName: kwok-provider-config
    magnumCABundlePath: /etc/kubernetes/ca-bundle.crt
    magnumClusterName: ""
    nameOverride: ""
    nodeSelector: {}
    podAnnotations: {}
    podDisruptionBudget:
      maxUnavailable: 1
    podLabels: {}
    priorityClassName: system-cluster-critical
    priorityConfigMapAnnotations: {}
    prometheusRule:
      additionalLabels: {}
      enabled: false
      interval: null
      namespace: monitoring
      rules: []
    rbac:
      additionalRules: []
      clusterScoped: true
      create: true
      pspEnabled: false
      serviceAccount:
        annotations: {}
        automountServiceAccountToken: true
        create: true
        name: ""
    replicaCount: 1
    resources: {}
    revisionHistoryLimit: 10
    secretKeyRefNameOverride: ""
    securityContext: {}
    service:
      annotations: {}
      clusterIP: ""
      create: true
      externalIPs: []
      labels: {}
      loadBalancerIP: ""
      loadBalancerSourceRanges: []
      portName: http
      servicePort: 8085
      type: ClusterIP
    serviceMonitor:
      annotations: {}
      enabled: false
      interval: 10s
      metricRelabelings: {}
      namespace: monitoring
      path: /metrics
      relabelings: {}
      selector:
        release: prometheus-operator
    tolerations: []
    topologySpreadConstraints: []
    updateStrategy: {}
    vpa:
      containerPolicy: {}
      enabled: false
      updateMode: Auto
config:
  autoDiscovery:
    clusterName: eks-apne1-prod-terraform-eks
    enabled: true
  awsRegion: ap-northeast-1
  rbac:
    create: true
    serviceAccount:
      annotations:
        eks.amazonaws.com/role-arn: arn:aws:iam::038314702298:role/EKSClusterAutoscaler
  tolerations:
  - effect: NoSchedule
    key: prod-only
    operator: Equal
    value: "true"
info:
  deleted: ""
  description: Dry run complete
  first_deployed: "2025-08-13T23:52:57.636208838+09:00"
  last_deployed: "2025-08-13T23:52:57.636208838+09:00"
  notes: |2-


    To verify that cluster-autoscaler has started, run:

      kubectl --namespace=kube-system get pods -l "app.kubernetes.io/name=aws-cluster-autoscaler,app.kubernetes.io/instance=cluster-autoscaler"
  status: pending-install
manifest: |
  ---
  # Source: cluster-autoscaler/templates/pdb.yaml
  apiVersion: policy/v1
  kind: PodDisruptionBudget
  metadata:
    labels:
      app.kubernetes.io/instance: "cluster-autoscaler"
      app.kubernetes.io/name: "aws-cluster-autoscaler"
      app.kubernetes.io/managed-by: "Helm"
      helm.sh/chart: "cluster-autoscaler-9.50.0"
    name: cluster-autoscaler-aws-cluster-autoscaler
    namespace: kube-system
  spec:
    selector:
      matchLabels:
        app.kubernetes.io/instance: "cluster-autoscaler"
        app.kubernetes.io/name: "aws-cluster-autoscaler"
    maxUnavailable: 1
  ---
  # Source: cluster-autoscaler/templates/serviceaccount.yaml
  apiVersion: v1
  kind: ServiceAccount
  metadata:
    labels:
      app.kubernetes.io/instance: "cluster-autoscaler"
      app.kubernetes.io/name: "aws-cluster-autoscaler"
      app.kubernetes.io/managed-by: "Helm"
      helm.sh/chart: "cluster-autoscaler-9.50.0"
    name: cluster-autoscaler-aws-cluster-autoscaler
    namespace: kube-system
    annotations:
      eks.amazonaws.com/role-arn: arn:aws:iam::038314702298:role/EKSClusterAutoscaler
  automountServiceAccountToken: true
  ---
  # Source: cluster-autoscaler/templates/clusterrole.yaml
  apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRole
  metadata:
    labels:
      app.kubernetes.io/instance: "cluster-autoscaler"
      app.kubernetes.io/name: "aws-cluster-autoscaler"
      app.kubernetes.io/managed-by: "Helm"
      helm.sh/chart: "cluster-autoscaler-9.50.0"
    name: cluster-autoscaler-aws-cluster-autoscaler
  rules:
    - apiGroups:
        - ""
      resources:
        - events
        - endpoints
      verbs:
        - create
        - patch
    - apiGroups:
      - ""
      resources:
      - pods/eviction
      verbs:
      - create
    - apiGroups:
        - ""
      resources:
        - pods/status
      verbs:
        - update
    - apiGroups:
        - ""
      resources:
        - endpoints
      resourceNames:
        - cluster-autoscaler
      verbs:
        - get
        - update
    - apiGroups:
        - ""
      resources:
        - nodes
      verbs:
      - watch
      - list
      - create
      - delete
      - get
      - update
    - apiGroups:
      - ""
      resources:
        - namespaces
        - pods
        - services
        - replicationcontrollers
        - persistentvolumeclaims
        - persistentvolumes
      verbs:
        - watch
        - list
        - get
    - apiGroups:
      - batch
      resources:
        - jobs
        - cronjobs
      verbs:
        - watch
        - list
        - get
    - apiGroups:
      - batch
      - extensions
      resources:
      - jobs
      verbs:
      - get
      - list
      - patch
      - watch
    - apiGroups:
        - extensions
      resources:
        - replicasets
        - daemonsets
      verbs:
        - watch
        - list
        - get
    - apiGroups:
        - policy
      resources:
        - poddisruptionbudgets
      verbs:
        - watch
        - list
    - apiGroups:
      - apps
      resources:
      - daemonsets
      - replicasets
      - statefulsets
      verbs:
      - watch
      - list
      - get
    - apiGroups:
      - storage.k8s.io
      resources:
      - storageclasses
      - csinodes
      - csidrivers
      - csistoragecapacities
      - volumeattachments
      verbs:
      - watch
      - list
      - get
    - apiGroups:
        - ""
      resources:
        - configmaps
      verbs:
        - list
        - watch
        - get
    - apiGroups:
      - coordination.k8s.io
      resources:
      - leases
      verbs:
      - create
    - apiGroups:
      - coordination.k8s.io
      resourceNames:
      - cluster-autoscaler
      resources:
      - leases
      verbs:
      - get
      - update
  ---
  # Source: cluster-autoscaler/templates/clusterrolebinding.yaml
  apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRoleBinding
  metadata:
    labels:
      app.kubernetes.io/instance: "cluster-autoscaler"
      app.kubernetes.io/name: "aws-cluster-autoscaler"
      app.kubernetes.io/managed-by: "Helm"
      helm.sh/chart: "cluster-autoscaler-9.50.0"
    name: cluster-autoscaler-aws-cluster-autoscaler
  roleRef:
    apiGroup: rbac.authorization.k8s.io
    kind: ClusterRole
    name: cluster-autoscaler-aws-cluster-autoscaler
  subjects:
    - kind: ServiceAccount
      name: cluster-autoscaler-aws-cluster-autoscaler
      namespace: kube-system
  ---
  # Source: cluster-autoscaler/templates/role.yaml
  apiVersion: rbac.authorization.k8s.io/v1
  kind: Role
  metadata:
    labels:
      app.kubernetes.io/instance: "cluster-autoscaler"
      app.kubernetes.io/name: "aws-cluster-autoscaler"
      app.kubernetes.io/managed-by: "Helm"
      helm.sh/chart: "cluster-autoscaler-9.50.0"
    name: cluster-autoscaler-aws-cluster-autoscaler
    namespace: kube-system
  rules:
    - apiGroups:
        - ""
      resources:
        - configmaps
      verbs:
        - create
    - apiGroups:
        - ""
      resources:
        - configmaps
      resourceNames:
        - cluster-autoscaler-status
      verbs:
        - delete
        - get
        - update
  ---
  # Source: cluster-autoscaler/templates/rolebinding.yaml
  apiVersion: rbac.authorization.k8s.io/v1
  kind: RoleBinding
  metadata:
    labels:
      app.kubernetes.io/instance: "cluster-autoscaler"
      app.kubernetes.io/name: "aws-cluster-autoscaler"
      app.kubernetes.io/managed-by: "Helm"
      helm.sh/chart: "cluster-autoscaler-9.50.0"
    name: cluster-autoscaler-aws-cluster-autoscaler
    namespace: kube-system
  roleRef:
    apiGroup: rbac.authorization.k8s.io
    kind: Role
    name: cluster-autoscaler-aws-cluster-autoscaler
  subjects:
    - kind: ServiceAccount
      name: cluster-autoscaler-aws-cluster-autoscaler
      namespace: kube-system
  ---
  # Source: cluster-autoscaler/templates/service.yaml
  apiVersion: v1
  kind: Service
  metadata:
    labels:
      app.kubernetes.io/instance: "cluster-autoscaler"
      app.kubernetes.io/name: "aws-cluster-autoscaler"
      app.kubernetes.io/managed-by: "Helm"
      helm.sh/chart: "cluster-autoscaler-9.50.0"
    name: cluster-autoscaler-aws-cluster-autoscaler
    namespace: kube-system
  spec:
    ports:
      - port: 8085
        protocol: TCP
        targetPort: 8085
        name: http
    selector:
      app.kubernetes.io/instance: "cluster-autoscaler"
      app.kubernetes.io/name: "aws-cluster-autoscaler"
    type: "ClusterIP"
  ---
  # Source: cluster-autoscaler/templates/deployment.yaml
  apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      {}
    labels:
      app.kubernetes.io/instance: "cluster-autoscaler"
      app.kubernetes.io/name: "aws-cluster-autoscaler"
      app.kubernetes.io/managed-by: "Helm"
      helm.sh/chart: "cluster-autoscaler-9.50.0"
    name: cluster-autoscaler-aws-cluster-autoscaler
    namespace: kube-system
  spec:
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app.kubernetes.io/instance: "cluster-autoscaler"
        app.kubernetes.io/name: "aws-cluster-autoscaler"
    template:
      metadata:
        labels:
          app.kubernetes.io/instance: "cluster-autoscaler"
          app.kubernetes.io/name: "aws-cluster-autoscaler"
      spec:
        priorityClassName: "system-cluster-critical"
        dnsPolicy: "ClusterFirst"
        containers:
          - name: aws-cluster-autoscaler
            image: "registry.k8s.io/autoscaling/cluster-autoscaler:v1.33.0"
            imagePullPolicy: "IfNotPresent"
            command:
              - ./cluster-autoscaler
              - --cloud-provider=aws
              - --namespace=kube-system
              - --node-group-auto-discovery=asg:tag=k8s.io/cluster-autoscaler/enabled,k8s.io/cluster-autoscaler/eks-apne1-prod-terraform-eks
              - --logtostderr=true
              - --stderrthreshold=info
              - --v=4
            env:
              - name: POD_NAMESPACE
                valueFrom:
                  fieldRef:
                    fieldPath: metadata.namespace
              - name: SERVICE_ACCOUNT
                valueFrom:
                  fieldRef:
                    fieldPath: spec.serviceAccountName
              - name: AWS_REGION
                value: "ap-northeast-1"
            livenessProbe:
              httpGet:
                path: /health-check
                port: 8085
            ports:
              - containerPort: 8085
            resources:
              {}
        serviceAccountName: cluster-autoscaler-aws-cluster-autoscaler
        tolerations:
          - effect: NoSchedule
            key: prod-only
            operator: Equal
            value: "true"
name: cluster-autoscaler
namespace: kube-system
version: 1
